// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// DATABASE PROVIDER
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto, uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id                    String                  @id @default(uuid())
  email                 String                  @unique
  fullName              String?
  avatarUrl             String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  // Relations
  expenses              Expense[]
  ExpenseShare          ExpenseShare[]
  messages              Message[]
  packingItems          PackingItem[]
  polls                 Poll[]
  staysBooked           Stay[]
  createdTrips          Trip[]
  tripInvites           TripInvitee[]           @relation("CreatorRelation")
  invitedTrips          TripInvitee[]           @relation("InvitedUserRelation")
  tripMembers           TripMember[]
  pollVotes             Vote[]
  Notification          Notification[]
  ScheduledNotification ScheduledNotification[]
}

model Trip {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  destination String
  startDate   DateTime
  endDate     DateTime
  budget      Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  imageUrl    String?
  // Relations
  expenses    Expense[]
  itineraries Itinerary[]
  messages    Message[]
  packingList PackingItem[]
  polls       Poll[]
  stays       Stay[]
  creator     User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  invitees    TripInvitee[]
  members     TripMember[]
}

model TripMember {
  tripId Int
  userId String
  role   String @default("member")
  // Relations
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([tripId, userId])
}

model TripInvitee {
  tripId        Int
  status        String    @default("pending")
  createdBy     String
  email         String
  expiresAt     DateTime?
  invitedUserId String?
  inviteToken   String    @id @default(uuid())
  // Relations
  creator       User      @relation("CreatorRelation", fields: [createdBy], references: [id], onDelete: Cascade)
  invitedUser   User?     @relation("InvitedUserRelation", fields: [invitedUserId], references: [id], onDelete: Cascade)
  trip          Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, email])
}

model Stay {
  id           Int      @id @default(autoincrement())
  tripId       Int
  name         String
  address      String?
  checkInDate  DateTime
  checkOutDate DateTime
  bookedById   String?
  url          String?
  // Relations
  bookedBy     User?    @relation(fields: [bookedById], references: [id])
  trip         Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Expense {
  id          Int            @id @default(autoincrement())
  amount      Float
  category    String
  description String?
  createdAt   DateTime       @default(now())
  tripId      Int
  paidById    String?
  // Relations
  paidBy      User?          @relation(fields: [paidById], references: [id])
  trip        Trip           @relation(fields: [tripId], references: [id], onDelete: Cascade)
  shares      ExpenseShare[]
}

model ExpenseShare {
  expenseId Int
  userId    String
  share     Float
  settled   Boolean @default(false)
  // Relations
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([expenseId, userId])
}

model Poll {
  id          Int          @id @default(autoincrement())
  tripId      Int
  question    String
  status      PollStatus   @default(ACTIVE)
  expiresAt   DateTime
  createdById String
  createdAt   DateTime     @default(now())
  completedAt DateTime? // Set when poll is completed, regardless of if its by manual completion or expiry
  winnerId    Int?         @unique // References the winning PollOption
  // Relations
  winner      PollOption?  @relation("PollWinner", fields: [winnerId], references: [id])
  options     PollOption[]
  votes       Vote[]
  createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  trip        Trip         @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model PollOption {
  id          Int    @id @default(autoincrement())
  pollId      Int
  option      String
  //Relations
  votes       Vote[]
  poll        Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  winningPoll Poll?  @relation("PollWinner")

  @@unique([pollId, option]) // Prevent duplicate options within the same poll
}

model Vote {
  id           Int      @id @default(autoincrement())
  pollOptionId Int
  userId       String
  votedAt      DateTime @default(now())
  pollId       Int

  // Relations
  option PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId]) // Ensure a user can only vote once per poll
}

enum PollStatus {
  ACTIVE
  COMPLETED
  TIE
}

//Unimplemented
model Itinerary {
  id          Int      @id @default(autoincrement())
  tripId      Int
  date        DateTime
  title       String
  description String
  location    String?
  assignedTo  String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  tripId    Int
  senderId  String
  createdAt DateTime @default(now())
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model PackingItem {
  id         Int      @id @default(autoincrement())
  name       String
  quantity   Int      @default(1)
  packed     Boolean  @default(false)
  assignedTo String?
  tripId     Int
  createdAt  DateTime @default(now())
  userId     String?
  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  User       User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    String
  tripId    Int?
  type      String
  relatedId Int?
  channel   String?
  title     String
  message   String
  data      Json?
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  readAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model ScheduledNotification {
  id        Int      @id @default(autoincrement())
  userId    String
  tripId    Int?
  type      String
  relatedId Int?
  channel   String?
  title     String
  message   String
  data      Json?
  sendAt    DateTime
  isSent    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sendAt])
  @@index([isSent])
}
